// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id                         String                       @id @default(cuid())
    name                       String?
    email                      String?                      @unique
    emailVerified              DateTime?
    image                      String?
    accounts                   Account[]
    Ranking                    Ranking[]
    UserRankingItemElo         UserRankingItemElo[]
    UserRankingItemChoiceIndex UserRankingItemChoiceIndex[]
}

model Ranking {
    id          String  @id @unique @default(cuid())
    userId      String
    name        String  @db.VarChar(200)
    description String? @db.Text
    popularity  Int     @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    RankingItem                RankingItem[]
    UserRankingItemChoiceIndex UserRankingItemChoiceIndex[]

    @@index([userId])
}

model RankingItem {
    id        String  @id @unique @default(cuid())
    rankingId String
    text      String  @db.Text
    imageUrl  String?
    globalElo Int     @default(1000)

    ranking            Ranking              @relation(fields: [rankingId], references: [id], onDelete: Cascade)
    UserRankingItemElo UserRankingItemElo[]

    @@index([rankingId])
}

model UserRankingItemElo {
    userId        String
    rankingItemId String
    elo           Int    @default(1000)

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    rankingItem RankingItem @relation(fields: [rankingItemId], references: [id], onDelete: Cascade)

    @@id([userId, rankingItemId])
    @@unique([userId, rankingItemId])
    @@index([userId])
    @@index([rankingItemId])
}

model UserRankingItemChoiceIndex {
    userId    String
    rankingId String
    index     Int    @default(0)

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    ranking Ranking @relation(fields: [rankingId], references: [id], onDelete: Cascade)

    @@id([userId, rankingId])
    @@index([userId])
    @@index([rankingId])
}
